import asyncio
import logging
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import json
import os
import numpy as np
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!
BOT_TOKEN = "7371629878:AAGY3yeMp9fxJq0iUwKpz2XYBzZHTtqctvg"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FIXED_EXPENSES = 4  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
MY_SHARE_PERCENT = 50  # –ú–æ—è –¥–æ–ª—è –æ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ (50%)
CHATTERFY_PERCENT = 0  # –ß–∞—Ç–µ—Ä—Ñ–∞–π –æ—Ç –º–æ–µ–π –¥–æ–ª–∏ (3%)
USD_TO_KZT = 515  # –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ç–µ–Ω–≥–µ

# –ì–µ–æ –∏ —Å—Ç–∞–≤–∫–∏
GEO_RATES = {
    "üáµüá≠ –§–∏–ª–∏–ø–ø–∏–Ω—ã": 20,
    "üáÆüá≥ –ò–Ω–¥–∏—è": 40,
    "üá©üáø –ê–ª–∂–∏—Ä": 45,
    "üá≤üá¶ –ú–∞—Ä–æ–∫–∫–æ": 50
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class StatsForm(StatesGroup):
    waiting_for_geo = State()
    waiting_for_deposits = State()
    waiting_for_ad_spend = State()
    waiting_for_additional_expenses = State()


class ReportForm(StatesGroup):
    waiting_for_period_days = State()
    waiting_for_comparison_period = State()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def save_stats(user_id: int, stats: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    filename = f"stats_{user_id}.json"
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            all_stats = json.load(f)
    except FileNotFoundError:
        all_stats = {}

    today = str(date.today())
    all_stats[today] = stats

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(all_stats, f, indent=2, ensure_ascii=False)


def load_stats(user_id: int):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    filename = f"stats_{user_id}.json"
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –¥–æ–ª–∏ –∏ —á–∞—Ç–µ—Ä—Ñ–∞–π
def calculate_advanced_profit(deposits: int, ad_spend: float, additional_expenses: float = 0, deposit_rate: int = 20):
    """
    –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–µ–π:
    1. –î–æ—Ö–æ–¥ = –¥–µ–ø–æ–∑–∏—Ç—ã * —Å—Ç–∞–≤–∫–∞_–≥–µ–æ
    2. –†–∞—Å—Ö–æ–¥—ã = —Ä–µ–∫–ª–∞–º–∞ + 3 + –¥–æ–ø.—Ä–∞—Å—Ö–æ–¥—ã
    3. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = –¥–æ—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥—ã
    4. –ú–æ—è –¥–æ–ª—è = —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å * 50%
    5. –ß–∞—Ç–µ—Ä—Ñ–∞–π = –º–æ—è –¥–æ–ª—è * 3%
    6. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å = –º–æ—è –¥–æ–ª—è - —á–∞—Ç–µ—Ä—Ñ–∞–π
    """
    # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    revenue = deposits * deposit_rate
    total_expenses = ad_spend + FIXED_EXPENSES + additional_expenses
    gross_profit = revenue - total_expenses

    # –†–∞—Å—á–µ—Ç –º–æ–µ–π –¥–æ–ª–∏
    my_share = gross_profit * (MY_SHARE_PERCENT / 100)

    # –†–∞—Å—á–µ—Ç —á–∞—Ç–µ—Ä—Ñ–∞–π —Å –º–æ–µ–π –¥–æ–ª–∏
    chatterfy_fee = my_share * (CHATTERFY_PERCENT / 100)

    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
    net_profit = my_share - chatterfy_fee

    # ROI —Ä–∞—Å—á–µ—Ç—ã
    roi_gross = (gross_profit / ad_spend) * 100 if ad_spend > 0 else 0
    roi_net = (net_profit / ad_spend) * 100 if ad_spend > 0 else 0

    return {
        'revenue': revenue,
        'total_expenses': total_expenses,
        'gross_profit': gross_profit,
        'my_share': my_share,
        'chatterfy_fee': chatterfy_fee,
        'net_profit': net_profit,
        'roi_gross': roi_gross,
        'roi_net': roi_net
    }


# Break-even –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
def calculate_breakeven(ad_spend: float, additional_expenses: float = 0, deposit_rate: int = 20):
    """–†–∞—Å—á–µ—Ç —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    total_expenses = ad_spend + FIXED_EXPENSES + additional_expenses
    deposits_needed = total_expenses / deposit_rate

    return {
        'deposits_needed': deposits_needed,
        'revenue_needed': total_expenses,
        'total_expenses': total_expenses
    }


# AI –§–£–ù–ö–¶–ò–ò
def analyze_patterns(user_stats):
    """üß† AI –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(user_stats) < 3:
        return ["üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"]

    insights = []

    # –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_profits = defaultdict(list)
    for date_str, data in user_stats.items():
        weekday = datetime.strptime(date_str, '%Y-%m-%d').weekday()
        weekday_profits[weekday].append(data['net_profit'])

    if weekday_profits:
        best_day_num = max(weekday_profits.items(), key=lambda x: sum(x[1]) / len(x[1]))[0]
        worst_day_num = min(weekday_profits.items(), key=lambda x: sum(x[1]) / len(x[1]))[0]

        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        insights.append(f"üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {days[best_day_num]}")
        insights.append(f"üìâ –•—É–¥—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {days[worst_day_num]}")

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    recent_profits = [data['net_profit'] for data in list(user_stats.values())[-7:]]
    if len(recent_profits) >= 3:
        trend_direction = "—Ä–∞—Å—Ç–µ—Ç" if recent_profits[-1] > recent_profits[0] else "–ø–∞–¥–∞–µ—Ç"
        insights.append(f"üìà –¢—Ä–µ–Ω–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: –ø—Ä–∏–±—ã–ª—å {trend_direction}")

    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    all_profits = [data['net_profit'] for data in user_stats.values()]
    avg_profit = sum(all_profits) / len(all_profits)
    profitable_days = len([p for p in all_profits if p > 0])
    success_rate = (profitable_days / len(all_profits)) * 100

    insights.append(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {success_rate:.1f}%")
    insights.append(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: ${avg_profit:.2f}")

    return insights


def get_ai_recommendations(current_data, user_stats):
    """üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    recommendations = []

    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ ROI
    roi = current_data.get('roi_net', 0)
    if roi < 20:
        recommendations.append("üö® ROI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π! –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞")
    elif roi < 50:
        recommendations.append("‚ö†Ô∏è ROI –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã")
    elif roi > 100:
        recommendations.append("üî• –û—Ç–ª–∏—á–Ω—ã–π ROI! –ú–æ–∂–Ω–æ —Å–º–µ–ª–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç")

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
    ad_spend = current_data.get('ad_spend', 0)
    if user_stats:
        avg_spend = sum(data['ad_spend'] for data in user_stats.values()) / len(user_stats)
        if ad_spend > avg_spend * 1.5:
            recommendations.append("üí∏ –°–µ–≥–æ–¥–Ω—è —Ç—Ä–∞—Ç–∏—à—å –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –°–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        elif ad_spend < avg_spend * 0.5:
            recommendations.append("üí∞ –ë—é–¥–∂–µ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–∏–∑–∫–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª—É—á—à–∏–º–∏ –¥–Ω—è–º–∏
    if user_stats:
        best_profit = max(data['net_profit'] for data in user_stats.values())
        current_profit = current_data.get('net_profit', 0)
        if current_profit > best_profit * 0.8:
            recommendations.append("üèÜ –°–µ–≥–æ–¥–Ω—è –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –¥–Ω–µ–π! –ó–∞–ø–æ–º–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        elif current_profit < best_profit * 0.3:
            recommendations.append(f"üìä –¢–≤–æ–π —Ä–µ–∫–æ—Ä–¥ ${best_profit:.2f}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–æ–≥–æ –¥–Ω—è")

    return recommendations if recommendations else ["‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"]


def detect_anomalies(user_stats):
    """üö® –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö"""
    if len(user_stats) < 5:
        return []

    anomalies = []
    profits = [data['net_profit'] for data in user_stats.values()]
    avg_profit = sum(profits) / len(profits)
    std_dev = np.std(profits) if len(profits) > 1 else 0

    # –ò—â–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
    for date_str, data in user_stats.items():
        profit = data['net_profit']
        if std_dev > 0 and abs(profit - avg_profit) > 2 * std_dev:
            formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
            if profit > avg_profit:
                anomalies.append(f"üöÄ {formatted_date}: –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å ${profit:.2f}")
            else:
                anomalies.append(f"‚ö†Ô∏è {formatted_date}: –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å ${profit:.2f}")

    return anomalies[-5:]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–æ–º–∞–ª–∏–π


def predict_monthly_profit(user_stats):
    """üìà –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
    if len(user_stats) < 7:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    recent_profits = [data['net_profit'] for data in list(user_stats.values())[-7:]]
    daily_average = sum(recent_profits) / len(recent_profits)
    monthly_prediction = daily_average * 30

    return f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: ${monthly_prediction:.2f} ({monthly_prediction * USD_TO_KZT:.0f} ‚Ç∏)"


def get_optimal_budget_suggestion(user_stats):
    """üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
    if len(user_stats) < 5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—é–¥–∂–µ—Ç–∞"

    # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –ª—É—á—à–∏–º ROI
    best_roi_days = [data for data in user_stats.values() if data['roi_net'] > 50]

    if not best_roi_days:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–Ω–µ–π —Å –≤—ã—Å–æ–∫–∏–º ROI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

    avg_spend = sum(day['ad_spend'] for day in best_roi_days) / len(best_roi_days)
    avg_roi = sum(day['roi_net'] for day in best_roi_days) / len(best_roi_days)

    return f"üí° –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: ${avg_spend:.2f} (—Å—Ä–µ–¥–Ω–∏–π ROI: {avg_roi:.1f}%)"


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–Ω–≥–µ
def format_profit_with_kzt(usd_amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ —Ç–µ–Ω–≥–µ"""
    kzt_amount = usd_amount * USD_TO_KZT
    return f"${usd_amount:.2f} ({kzt_amount:.0f} ‚Ç∏)"


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"), KeyboardButton(text="üìà –°–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="üìã –û—Ç—á–µ—Ç—ã"), KeyboardButton(text="üî• –¢–æ–ø –¥–Ω–∏")],
            [KeyboardButton(text="‚öñÔ∏è Break-Even"), KeyboardButton(text="üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [KeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã"), KeyboardButton(text="ü§ñ AI –ê–Ω–∞–ª–∏–∑")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–µ–æ
def get_geo_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{geo} (${rate})", callback_data=f"geo_{geo.split()[1]}_{rate}")]
            for geo, rate in GEO_RATES.items()
        ]
    )
    return keyboard


# –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
def get_reports_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞ 7 –¥–Ω–µ–π", callback_data="report_7")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ 15 –¥–Ω–µ–π", callback_data="report_15")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ 30 –¥–Ω–µ–π", callback_data="report_30")],
            [InlineKeyboardButton(text="üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="report_month")],
        ]
    )
    return keyboard


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = f"""
ü§ñ <b>AI-Powered –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞!</b>

üåç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ì–ï–û:</b>
{chr(10).join([f"‚îú {geo}: ${rate}" for geo, rate in GEO_RATES.items()])}

üí∞ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏:</b>
‚îú –ú–æ—è –¥–æ–ª—è: {MY_SHARE_PERCENT}% –æ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
‚îú –ß–∞—Ç–µ—Ä—Ñ–∞–π: {CHATTERFY_PERCENT}% —Å –º–æ–µ–π –¥–æ–ª–∏
‚îî –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${FIXED_EXPENSES}

ü§ñ <b>AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞

üí± <b>–í–∞–ª—é—Ç—ã:</b> USD –∏ –¢–µ–Ω–≥–µ (‚Ç∏)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    await message.answer(welcome_text, reply_markup=get_main_menu(), parse_mode="HTML")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(F.text == "üìä –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def add_stats(message: types.Message, state: FSMContext):
    await message.answer(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –ì–ï–û –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        reply_markup=get_geo_menu(),
        parse_mode="HTML"
    )
    await state.set_state(StatsForm.waiting_for_geo)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–æ
@dp.callback_query(F.data.startswith("geo_"))
async def process_geo_selection(callback: types.CallbackQuery, state: FSMContext):
    geo_data = callback.data.split("_")
    geo_name = geo_data[1]
    deposit_rate = int(geo_data[2])

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–æ
    full_geo_name = next(geo for geo in GEO_RATES.keys() if geo_name in geo)

    await state.update_data(geo=full_geo_name, deposit_rate=deposit_rate)

    await callback.message.answer(
        f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ –ì–ï–û:</b> {full_geo_name}\n"
        f"üíµ <b>–°—Ç–∞–≤–∫–∞:</b> ${deposit_rate} –∑–∞ –¥–µ–ø–æ–∑–∏—Ç\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:",
        parse_mode="HTML"
    )
    await state.set_state(StatsForm.waiting_for_deposits)
    await callback.answer()


@dp.message(StatsForm.waiting_for_deposits)
async def process_deposits(message: types.Message, state: FSMContext):
    try:
        deposits = int(message.text)
        if deposits < 0:
            raise ValueError

        data = await state.get_data()
        deposit_rate = data['deposit_rate']
        geo = data['geo']

        await state.update_data(deposits=deposits)
        revenue = deposits * deposit_rate
        await message.answer(
            f"‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã: {deposits} —à—Ç.\n"
            f"üåç –ì–ï–û: {geo}\n"
            f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: ${revenue}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –Ω–∞ —Ä–µ–∫–ª–∞–º—É (–≤ USD):"
        )
        await state.set_state(StatsForm.waiting_for_ad_spend)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0)")


@dp.message(StatsForm.waiting_for_ad_spend)
async def process_ad_spend(message: types.Message, state: FSMContext):
    try:
        ad_spend = float(message.text.replace(',', '.'))
        if ad_spend < 0:
            raise ValueError

        data = await state.get_data()
        deposit_rate = data['deposit_rate']

        await state.update_data(ad_spend=ad_spend)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç break-even
        breakeven = calculate_breakeven(ad_spend, 0, deposit_rate)

        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Ä–µ–∫–ª–∞–º—É: ${ad_spend}\n\n"
            f"üìä <b>Break-even –∞–Ω–∞–ª–∏–∑:</b>\n"
            f"‚öñÔ∏è –ù—É–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {breakeven['deposits_needed']:.1f}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–∏–ª–∏ 0, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):"
        )
        await state.set_state(StatsForm.waiting_for_additional_expenses)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É")


@dp.message(StatsForm.waiting_for_additional_expenses)
async def process_additional_expenses(message: types.Message, state: FSMContext):
    try:
        additional_expenses = float(message.text.replace(',', '.'))
        if additional_expenses < 0:
            raise ValueError

        data = await state.get_data()
        deposits = data['deposits']
        ad_spend = data['ad_spend']
        deposit_rate = data['deposit_rate']
        geo = data['geo']

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
        results = calculate_advanced_profit(deposits, ad_spend, additional_expenses, deposit_rate)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            'geo': geo,
            'deposit_rate': deposit_rate,
            'deposits': deposits,
            'ad_spend': ad_spend,
            'additional_expenses': additional_expenses,
            'revenue': results['revenue'],
            'total_expenses': results['total_expenses'],
            'gross_profit': results['gross_profit'],
            'my_share': results['my_share'],
            'chatterfy_fee': results['chatterfy_fee'],
            'net_profit': results['net_profit'],
            'roi_gross': results['roi_gross'],
            'roi_net': results['roi_net'],
            'timestamp': datetime.now().isoformat()
        }

        save_stats(message.from_user.id, stats)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        user_stats = load_stats(message.from_user.id)

        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ai_recommendations = get_ai_recommendations(stats, user_stats)

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        profit_emoji = "üü¢" if results['net_profit'] > 0 else "üî¥" if results['net_profit'] < 0 else "üü°"
        roi_emoji = "üìà" if results['roi_net'] > 0 else "üìâ"

        report = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date.today().strftime('%d.%m.%Y')}</b>

üåç <b>–ì–ï–û:</b> {geo}
üè¶ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {deposits} —à—Ç.
üí∞ <b>–î–æ—Ö–æ–¥:</b> ${results['revenue']:.2f}

üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b>
‚îú –†–µ–∫–ª–∞–º–∞: ${ad_spend:.2f}
‚îú –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${FIXED_EXPENSES:.2f}
‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: ${additional_expenses:.2f}
‚îî <b>–í—Å–µ–≥–æ:</b> ${results['total_expenses']:.2f}

üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${results['gross_profit']:.2f}

üéØ <b>–ú–æ—è –¥–æ–ª—è ({MY_SHARE_PERCENT}%):</b> ${results['my_share']:.2f}
üîß <b>–ß–∞—Ç–µ—Ä—Ñ–∞–π ({CHATTERFY_PERCENT}%):</b> ${results['chatterfy_fee']:.2f}

{profit_emoji} <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ò–ë–´–õ–¨:</b> {format_profit_with_kzt(results['net_profit'])}

üìä <b>ROI:</b>
‚îú –í–∞–ª–æ–≤—ã–π: {results['roi_gross']:.1f}%
‚îî {roi_emoji} <b>–ß–∏—Å—Ç—ã–π: {results['roi_net']:.1f}%</b>

ü§ñ <b>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{chr(10).join([f"‚Ä¢ {rec}" for rec in ai_recommendations[:2]])}
        """

        await message.answer(report, parse_mode="HTML")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")


# –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìà –°–µ–≥–æ–¥–Ω—è")
async def today_stats(message: types.Message):
    stats = load_stats(message.from_user.id)
    today = str(date.today())

    if today not in stats:
        await message.answer("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return

    data = stats[today]
    profit_emoji = "üü¢" if data['net_profit'] > 0 else "üî¥" if data['net_profit'] < 0 else "üü°"
    roi_emoji = "üìà" if data['roi_net'] > 0 else "üìâ"

    report = f"""
üìä <b>–°–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})</b>

üåç <b>–ì–ï–û:</b> {data.get('geo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè¶ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {data['deposits']} —à—Ç.
üí∞ <b>–î–æ—Ö–æ–¥:</b> ${data['revenue']:.2f}
üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> ${data['total_expenses']:.2f}

üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${data['gross_profit']:.2f}
üéØ <b>–ú–æ—è –¥–æ–ª—è:</b> ${data['my_share']:.2f}
üîß <b>–ß–∞—Ç–µ—Ä—Ñ–∞–π:</b> ${data['chatterfy_fee']:.2f}

{profit_emoji} <b>–ò–¢–û–ì–û:</b> {format_profit_with_kzt(data['net_profit'])}
{roi_emoji} <b>ROI:</b> {data['roi_net']:.1f}%
    """

    await message.answer(report, parse_mode="HTML")


# AI –ê–Ω–∞–ª–∏–∑
@dp.message(F.text == "ü§ñ AI –ê–Ω–∞–ª–∏–∑")
async def ai_analysis(message: types.Message):
    user_stats = load_stats(message.from_user.id)

    if len(user_stats) < 3:
        await message.answer(
            "ü§ñ <b>AI –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã AI –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –¥–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            f"–£ –≤–∞—Å: {len(user_stats)} –¥–Ω–µ–π\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!",
            parse_mode="HTML"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ AI –∞–Ω–∞–ª–∏–∑—ã
    patterns = analyze_patterns(user_stats)
    anomalies = detect_anomalies(user_stats)
    monthly_prediction = predict_monthly_profit(user_stats)
    budget_suggestion = get_optimal_budget_suggestion(user_stats)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    ai_report = f"""
ü§ñ <b>AI –ê–ù–ê–õ–ò–ó –í–ê–®–ï–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò</b>

üìä <b>–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í:</b>
{chr(10).join([f"‚Ä¢ {pattern}" for pattern in patterns])}

üö® <b>–î–ï–¢–ï–ö–¢–û–† –ê–ù–û–ú–ê–õ–ò–ô:</b>
{chr(10).join([f"‚Ä¢ {anomaly}" for anomaly in anomalies]) if anomalies else "‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"}

üìà <b>–ü–†–û–ì–ù–û–ó–´:</b>
‚Ä¢ {monthly_prediction}
‚Ä¢ {budget_suggestion}

üí° <b>–û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª—É—á—à–∏–µ –¥–Ω–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç—ã
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω
    """

    await message.answer(ai_report, parse_mode="HTML")


# –û—Ç—á–µ—Ç—ã
@dp.message(F.text == "üìã –û—Ç—á–µ—Ç—ã")
async def reports_menu(message: types.Message):
    await message.answer(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:</b>",
        reply_markup=get_reports_menu(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
@dp.callback_query(F.data.startswith("report_"))
async def process_report(callback: types.CallbackQuery):
    report_type = callback.data.split("_")[1]
    user_id = callback.from_user.id
    stats = load_stats(user_id)

    if not stats:
        await callback.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return

    today = date.today()

    if report_type == "7":
        start_date = today - timedelta(days=6)
        period_name = "7 –¥–Ω–µ–π"
    elif report_type == "15":
        start_date = today - timedelta(days=14)
        period_name = "15 –¥–Ω–µ–π"
    elif report_type == "30":
        start_date = today - timedelta(days=29)
        period_name = "30 –¥–Ω–µ–π"
    elif report_type == "month":
        start_date = today.replace(day=1)
        period_name = "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
    period_stats = {}
    for date_str, data in stats.items():
        stat_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        if start_date <= stat_date <= today:
            period_stats[date_str] = data

    if not period_stats:
        await callback.answer(f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}")
        return

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
    total_deposits = sum(data['deposits'] for data in period_stats.values())
    total_revenue = sum(data['revenue'] for data in period_stats.values())
    total_expenses = sum(data['total_expenses'] for data in period_stats.values())
    total_gross_profit = sum(data['gross_profit'] for data in period_stats.values())
    total_net_profit = sum(data['net_profit'] for data in period_stats.values())
    total_ad_spend = sum(data['ad_spend'] for data in period_stats.values())

    avg_roi = (total_net_profit / total_ad_spend) * 100 if total_ad_spend > 0 else 0
    days_count = len(period_stats)
    avg_deposits_per_day = total_deposits / days_count if days_count > 0 else 0
    avg_profit_per_day = total_net_profit / days_count if days_count > 0 else 0

    profit_emoji = "üü¢" if total_net_profit > 0 else "üî¥" if total_net_profit < 0 else "üü°"

    # –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
    best_day = max(period_stats.items(), key=lambda x: x[1]['net_profit'])
    worst_day = min(period_stats.items(), key=lambda x: x[1]['net_profit'])

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ì–ï–û
    geo_stats = defaultdict(lambda: {'deposits': 0, 'profit': 0})
    for data in period_stats.values():
        geo = data.get('geo', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        geo_stats[geo]['deposits'] += data['deposits']
        geo_stats[geo]['profit'] += data['net_profit']

    geo_breakdown = "\n".join([
        f"‚îú {geo}: {stats['deposits']} –¥–µ–ø–æ–≤, ${stats['profit']:.2f}"
        for geo, stats in geo_stats.items()
    ])

    report = f"""
üìä <b>–û—Ç—á–µ—Ç –∑–∞ {period_name}</b>
üìÖ {start_date.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}

üìà <b>–ò–¢–û–ì–ò:</b>
üè¶ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {total_deposits}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${total_revenue:.2f}
üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${total_expenses:.2f}
üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_gross_profit:.2f}

{profit_emoji} <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ò–ë–´–õ–¨: {format_profit_with_kzt(total_net_profit)}</b>
üìä <b>–°—Ä–µ–¥–Ω–∏–π ROI: {avg_roi:.1f}%</b>

üìä <b>–°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>
‚îú –î–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –¥–µ–Ω—å: {avg_deposits_per_day:.1f}
‚îú –ü—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: ${avg_profit_per_day:.2f}
‚îî –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {days_count}

üåç <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–ï–û:</b>
{geo_breakdown}

üéØ <b>–õ—É—á—à–∏–π –¥–µ–Ω—å:</b> {datetime.strptime(best_day[0], '%Y-%m-%d').strftime('%d.%m.%Y')} ({format_profit_with_kzt(best_day[1]['net_profit'])})
üìâ <b>–•—É–¥—à–∏–π –¥–µ–Ω—å:</b> {datetime.strptime(worst_day[0], '%Y-%m-%d').strftime('%d.%m.%Y')} ({format_profit_with_kzt(worst_day[1]['net_profit'])})
    """

    await callback.message.answer(report, parse_mode="HTML")
    await callback.answer()


# –¢–æ–ø –¥–Ω–∏ –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É
@dp.message(F.text == "üî• –¢–æ–ø –¥–Ω–∏")
async def top_days(message: types.Message):
    stats = load_stats(message.from_user.id)

    if not stats:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    sorted_days = sorted(stats.items(), key=lambda x: x[1]['net_profit'], reverse=True)

    top_text = "üî• <b>–¢–û–ü-10 –¥–Ω–µ–π –ø–æ –ø—Ä–∏–±—ã–ª–∏:</b>\n\n"

    for i, (date_str, data) in enumerate(sorted_days[:10], 1):
        profit_emoji = "üü¢" if data['net_profit'] > 0 else "üî¥" if data['net_profit'] < 0 else "üü°"
        formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
        geo = data.get('geo', 'üåç')

        top_text += f"{i}. {profit_emoji} <b>{formatted_date}</b> ({geo})\n"
        top_text += f"   üí∞ {format_profit_with_kzt(data['net_profit'])} | üè¶ {data['deposits']} –¥–µ–ø–æ–≤ | üìä {data['roi_net']:.1f}% ROI\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–¥—à–∏–µ –¥–Ω–∏
    if len(sorted_days) > 10:
        top_text += "\nüìâ <b>–•—É–¥—à–∏–µ –¥–Ω–∏:</b>\n\n"
        for i, (date_str, data) in enumerate(sorted_days[-3:], 1):
            profit_emoji = "üî¥" if data['net_profit'] < 0 else "üü°"
            formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
            geo = data.get('geo', 'üåç')

            top_text += f"{i}. {profit_emoji} <b>{formatted_date}</b> ({geo})\n"
            top_text += f"   üí∏ {format_profit_with_kzt(data['net_profit'])} | üè¶ {data['deposits']} –¥–µ–ø–æ–≤ | üìä {data['roi_net']:.1f}% ROI\n\n"

    await message.answer(top_text, parse_mode="HTML")


# Break-even –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(F.text == "‚öñÔ∏è Break-Even")
async def breakeven_calculator(message: types.Message):
    calculator_text = """
‚öñÔ∏è <b>Break-Even –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
<code>be –≥–µ–æ —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ä–µ–∫–ª–∞–º—É [–¥–æ–ø_—Ä–∞—Å—Ö–æ–¥—ã]</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>be —Ñ–∏–ª–∏–ø–ø–∏–Ω—ã 100</code> - –§–∏–ª–∏–ø–ø–∏–Ω—ã, $100 –Ω–∞ —Ä–µ–∫–ª–∞–º—É
‚Ä¢ <code>be –∏–Ω–¥–∏—è 150 20</code> - –ò–Ω–¥–∏—è, $150 –Ω–∞ —Ä–µ–∫–ª–∞–º—É + $20 –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ <code>be –∞–ª–∂–∏—Ä 200</code> - –ê–ª–∂–∏—Ä, $200 –Ω–∞ —Ä–µ–∫–ª–∞–º—É
‚Ä¢ <code>be –º–∞—Ä–æ–∫–∫–æ 180 15</code> - –ú–∞—Ä–æ–∫–∫–æ, $180 –Ω–∞ —Ä–µ–∫–ª–∞–º—É + $15 –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã

üåç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ì–ï–û:</b>
{chr(10).join([f"‚Ä¢ {geo.split()[1].lower()}: ${rate}" for geo, rate in GEO_RATES.items()])}

üìä <b>–§–æ—Ä–º—É–ª–∞:</b>
‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã = –†–µ–∫–ª–∞–º–∞ + $3 (—Ñ–∏–∫—Å.) + –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω—É–∂–Ω–æ = –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã √∑ –°—Ç–∞–≤–∫–∞ –ì–ï–û
    """
    await message.answer(calculator_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ break-even –∫–æ–º–∞–Ω–¥
@dp.message(F.text.regexp(r'^be\s+\w+\s+\d+(?:\.\d+)?(?:\s+\d+(?:\.\d+)?)?$'))
async def calculate_breakeven_command(message: types.Message):
    try:
        parts = message.text.lower().split()
        geo_input = parts[1]
        ad_spend = float(parts[2])
        additional_expenses = float(parts[3]) if len(parts) > 3 else 0

        # –ù–∞—Ö–æ–¥–∏–º –ì–ï–û
        deposit_rate = None
        geo_name = None
        for geo, rate in GEO_RATES.items():
            if geo_input in geo.lower():
                deposit_rate = rate
                geo_name = geo
                break

        if not deposit_rate:
            await message.answer("‚ùå –ì–ï–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: —Ñ–∏–ª–∏–ø–ø–∏–Ω—ã, –∏–Ω–¥–∏—è, –∞–ª–∂–∏—Ä, –º–∞—Ä–æ–∫–∫–æ")
            return

        breakeven = calculate_breakeven(ad_spend, additional_expenses, deposit_rate)

        result = f"""
‚öñÔ∏è <b>Break-Even –ê–Ω–∞–ª–∏–∑</b>

üåç <b>–ì–ï–û:</b> {geo_name}
üíµ <b>–°—Ç–∞–≤–∫–∞:</b> ${deposit_rate}

üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b>
‚îú –†–µ–∫–ª–∞–º–∞: ${ad_spend:.2f}
‚îú –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${FIXED_EXPENSES:.2f}
‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: ${additional_expenses:.2f}
‚îî <b>–í—Å–µ–≥–æ:</b> ${breakeven['total_expenses']:.2f}

üéØ <b>–î–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ:</b>
üè¶ <b>–î–µ–ø–æ–∑–∏—Ç–æ–≤:</b> {breakeven['deposits_needed']:.1f} —à—Ç.
üí∞ <b>–î–æ—Ö–æ–¥–∞:</b> ${breakeven['revenue_needed']:.2f}

üìä <b>–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ break-even:</b>
‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $0.00
‚Ä¢ –ú–æ—è –¥–æ–ª—è: $0.00
‚Ä¢ ROI: 0%
        """

        await message.answer(result, parse_mode="HTML")

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: be –≥–µ–æ —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ä–µ–∫–ª–∞–º—É [–¥–æ–ø_—Ä–∞—Å—Ö–æ–¥—ã]")


# –ë—ã—Å—Ç—Ä—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(F.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def profit_calculator(message: types.Message):
    calculator_text = """
üßÆ <b>–ë—ã—Å—Ç—Ä—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏</b>

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
<code>–≥–µ–æ –¥–µ–ø–æ–∑–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ä–µ–∫–ª–∞–º—É [–¥–æ–ø_—Ä–∞—Å—Ö–æ–¥—ã]</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>—Ñ–∏–ª–∏–ø–ø–∏–Ω—ã 5 100</code> - –§–∏–ª–∏–ø–ø–∏–Ω—ã, 5 –¥–µ–ø–æ–∑–∏—Ç–æ–≤, $100 –Ω–∞ —Ä–µ–∫–ª–∞–º—É
‚Ä¢ <code>–∏–Ω–¥–∏—è 3 80 10</code> - –ò–Ω–¥–∏—è, 3 –¥–µ–ø–æ–∑–∏—Ç–∞, $80 –Ω–∞ —Ä–µ–∫–ª–∞–º—É, $10 –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ <code>–∞–ª–∂–∏—Ä 4 120</code> - –ê–ª–∂–∏—Ä, 4 –¥–µ–ø–æ–∑–∏—Ç–∞, $120 –Ω–∞ —Ä–µ–∫–ª–∞–º—É
‚Ä¢ <code>–º–∞—Ä–æ–∫–∫–æ 2 90 5</code> - –ú–∞—Ä–æ–∫–∫–æ, 2 –¥–µ–ø–æ–∑–∏—Ç–∞, $90 –Ω–∞ —Ä–µ–∫–ª–∞–º—É, $5 –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã

üåç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ì–ï–û:</b>
{chr(10).join([f"‚Ä¢ {geo.split()[1].lower()}: ${rate}" for geo, rate in GEO_RATES.items()])}

üí∞ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞:</b>
‚Ä¢ –î–æ—Ö–æ–¥ = –î–µ–ø–æ–∑–∏—Ç—ã √ó –°—Ç–∞–≤–∫–∞ –ì–ï–û
‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = –î–æ—Ö–æ–¥ - –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –ú–æ—è –¥–æ–ª—è = –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å √ó 50%
‚Ä¢ –ß–∞—Ç–µ—Ä—Ñ–∞–π = –ú–æ—è –¥–æ–ª—è √ó 3%
‚Ä¢ <b>–ò—Ç–æ–≥–æ = –ú–æ—è –¥–æ–ª—è - –ß–∞—Ç–µ—Ä—Ñ–∞–π</b>
    """
    await message.answer(calculator_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@dp.message(F.text.regexp(r'^\w+\s+\d+\s+\d+(?:\.\d+)?(?:\s+\d+(?:\.\d+)?)?$'))
async def calculate_quick_profit(message: types.Message):
    try:
        parts = message.text.lower().split()
        geo_input = parts[0]
        deposits = int(parts[1])
        ad_spend = float(parts[2])
        additional_expenses = float(parts[3]) if len(parts) > 3 else 0

        # –ù–∞—Ö–æ–¥–∏–º –ì–ï–û
        deposit_rate = None
        geo_name = None
        for geo, rate in GEO_RATES.items():
            if geo_input in geo.lower():
                deposit_rate = rate
                geo_name = geo
                break

        if not deposit_rate:
            await message.answer("‚ùå –ì–ï–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: —Ñ–∏–ª–∏–ø–ø–∏–Ω—ã, –∏–Ω–¥–∏—è, –∞–ª–∂–∏—Ä, –º–∞—Ä–æ–∫–∫–æ")
            return

        results = calculate_advanced_profit(deposits, ad_spend, additional_expenses, deposit_rate)
        breakeven = calculate_breakeven(ad_spend, additional_expenses, deposit_rate)

        profit_emoji = "üü¢" if results['net_profit'] > 0 else "üî¥" if results['net_profit'] < 0 else "üü°"
        roi_emoji = "üìà" if results['roi_net'] > 0 else "üìâ"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ break-even
        if deposits >= breakeven['deposits_needed']:
            be_status = f"‚úÖ –í—ã—à–µ break-even –Ω–∞ {deposits - breakeven['deposits_needed']:.1f} –¥–µ–ø–æ–∑–∏—Ç–æ–≤"
        else:
            be_status = f"‚ö†Ô∏è –ù–∏–∂–µ break-even –Ω–∞ {breakeven['deposits_needed'] - deposits:.1f} –¥–µ–ø–æ–∑–∏—Ç–æ–≤"

        calc_result = f"""
üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b>

üåç <b>–ì–ï–û:</b> {geo_name}
üè¶ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {deposits} —à—Ç.
üí∞ <b>–î–æ—Ö–æ–¥:</b> ${results['revenue']:.2f}

üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b>
‚îú –†–µ–∫–ª–∞–º–∞: ${ad_spend:.2f}
‚îú –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${FIXED_EXPENSES:.2f}
‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: ${additional_expenses:.2f}
‚îî <b>–í—Å–µ–≥–æ:</b> ${results['total_expenses']:.2f}

üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${results['gross_profit']:.2f}

üéØ <b>–ú–æ—è –¥–æ–ª—è ({MY_SHARE_PERCENT}%):</b> ${results['my_share']:.2f}
üîß <b>–ß–∞—Ç–µ—Ä—Ñ–∞–π ({CHATTERFY_PERCENT}%):</b> ${results['chatterfy_fee']:.2f}

{profit_emoji} <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ò–ë–´–õ–¨:</b> {format_profit_with_kzt(results['net_profit'])}

üìä <b>ROI:</b>
‚îú –í–∞–ª–æ–≤—ã–π: {results['roi_gross']:.1f}%
‚îî {roi_emoji} <b>–ß–∏—Å—Ç—ã–π: {results['roi_net']:.1f}%</b>

‚öñÔ∏è <b>Break-Even:</b> {breakeven['deposits_needed']:.1f} –¥–µ–ø–æ–∑–∏—Ç–æ–≤
{be_status}
        """

        await message.answer(calc_result, parse_mode="HTML")

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≥–µ–æ –¥–µ–ø–æ–∑–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ä–µ–∫–ª–∞–º—É [–¥–æ–ø_—Ä–∞—Å—Ö–æ–¥—ã]")


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
@dp.message(F.text == "üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã")
async def compare_periods(message: types.Message):
    stats = load_stats(message.from_user.id)

    if not stats:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return

    today = date.today()

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π
    period1_start = today - timedelta(days=14)
    period1_end = today

    # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 15 –¥–Ω–µ–π
    period2_start = today - timedelta(days=29)
    period2_end = today - timedelta(days=15)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    period1_stats = {}
    period2_stats = {}

    for date_str, data in stats.items():
        stat_date = datetime.strptime(date_str, '%Y-%m-%d').date()

        if period1_start <= stat_date <= period1_end:
            period1_stats[date_str] = data
        elif period2_start <= stat_date <= period2_end:
            period2_stats[date_str] = data

    if not period1_stats and not period2_stats:
        await message.answer("üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤.")
        return

    # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 1
    p1_deposits = sum(data['deposits'] for data in period1_stats.values()) if period1_stats else 0
    p1_revenue = sum(data['revenue'] for data in period1_stats.values()) if period1_stats else 0
    p1_expenses = sum(data['total_expenses'] for data in period1_stats.values()) if period1_stats else 0
    p1_profit = sum(data['net_profit'] for data in period1_stats.values()) if period1_stats else 0
    p1_days = len(period1_stats)

    # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 2
    p2_deposits = sum(data['deposits'] for data in period2_stats.values()) if period2_stats else 0
    p2_revenue = sum(data['revenue'] for data in period2_stats.values()) if period2_stats else 0
    p2_expenses = sum(data['total_expenses'] for data in period2_stats.values()) if period2_stats else 0
    p2_profit = sum(data['net_profit'] for data in period2_stats.values()) if period2_stats else 0
    p2_days = len(period2_stats)

    # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def calculate_change(new_val, old_val):
        if old_val == 0:
            return "‚àû" if new_val > 0 else "0"
        return f"{((new_val - old_val) / old_val) * 100:+.1f}%"

    def get_trend_emoji(new_val, old_val):
        if new_val > old_val:
            return "üìà"
        elif new_val < old_val:
            return "üìâ"
        else:
            return "‚û°Ô∏è"

    deposits_change = calculate_change(p1_deposits, p2_deposits)
    profit_change = calculate_change(p1_profit, p2_profit)
    revenue_change = calculate_change(p1_revenue, p2_revenue)

    comparison = f"""
üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ (15 –¥–Ω–µ–π)</b>

üìÖ <b>–ü–µ—Ä–∏–æ–¥ 1:</b> {period1_start.strftime('%d.%m')} - {period1_end.strftime('%d.%m')} ({p1_days} –¥–Ω–µ–π)
üìÖ <b>–ü–µ—Ä–∏–æ–¥ 2:</b> {period2_start.strftime('%d.%m')} - {period2_end.strftime('%d.%m')} ({p2_days} –¥–Ω–µ–π)

üè¶ <b>–î–ï–ü–û–ó–ò–¢–´:</b>
‚îú –°–µ–π—á–∞—Å: {p1_deposits} —à—Ç.
‚îú –ë—ã–ª–æ: {p2_deposits} —à—Ç.
‚îî {get_trend_emoji(p1_deposits, p2_deposits)} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {deposits_change}

üí∞ <b>–î–û–•–û–î:</b>
‚îú –°–µ–π—á–∞—Å: ${p1_revenue:.2f}
‚îú –ë—ã–ª–æ: ${p2_revenue:.2f}
‚îî {get_trend_emoji(p1_revenue, p2_revenue)} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {revenue_change}

üí∏ <b>–†–ê–°–•–û–î–´:</b>
‚îú –°–µ–π—á–∞—Å: ${p1_expenses:.2f}
‚îú –ë—ã–ª–æ: ${p2_expenses:.2f}
‚îî {get_trend_emoji(p2_expenses, p1_expenses)} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {calculate_change(p1_expenses, p2_expenses)}

üíµ <b>–ü–†–ò–ë–´–õ–¨:</b>
‚îú –°–µ–π—á–∞—Å: {format_profit_with_kzt(p1_profit)}
‚îú –ë—ã–ª–æ: {format_profit_with_kzt(p2_profit)}
‚îî {get_trend_emoji(p1_profit, p2_profit)} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {profit_change}

üìä <b>–°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –í –î–ï–ù–¨:</b>
‚îú –î–µ–ø–æ–∑–∏—Ç—ã: {p1_deposits / p1_days if p1_days > 0 else 0:.1f} vs {p2_deposits / p2_days if p2_days > 0 else 0:.1f}
‚îî –ü—Ä–∏–±—ã–ª—å: ${p1_profit / p1_days if p1_days > 0 else 0:.2f} vs ${p2_profit / p2_days if p2_days > 0 else 0:.2f}
    """

    await message.answer(comparison, parse_mode="HTML")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(message: types.Message):
    info_text = f"""
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AI-–±–æ—Ç–µ</b>

üéØ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> AI-powered —É—á–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ç—Ä–∞—Ñ–∏–∫–∞

üåç <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ì–ï–û:</b>
{chr(10).join([f"‚Ä¢ {geo}: ${rate}" for geo, rate in GEO_RATES.items()])}

üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–æ—è –¥–æ–ª—è: {MY_SHARE_PERCENT}% –æ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ –ß–∞—Ç–µ—Ä—Ñ–∞–π: {CHATTERFY_PERCENT}% —Å –º–æ–µ–π –¥–æ–ª–∏
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${FIXED_EXPENSES}
‚Ä¢ –í–∞–ª—é—Ç—ã: USD –∏ –¢–µ–Ω–≥–µ (‚Ç∏)

ü§ñ <b>AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞

üîß <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú—É–ª—å—Ç–∏-–ì–ï–û —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ (15 –¥–Ω–µ–π)
‚Ä¢ –¢–æ–ø –¥–Ω–∏ –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É
‚Ä¢ Break-even –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏

üí° <b>–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏:</b>
1. –î–æ—Ö–æ–¥ = –î–µ–ø–æ–∑–∏—Ç—ã √ó –°—Ç–∞–≤–∫–∞ –ì–ï–û
2. –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã = –†–µ–∫–ª–∞–º–∞ + ${FIXED_EXPENSES} + –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã
3. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = –î–æ—Ö–æ–¥ - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
4. –ú–æ—è –¥–æ–ª—è = –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å √ó {MY_SHARE_PERCENT}%
5. –ß–∞—Ç–µ—Ä—Ñ–∞–π = –ú–æ—è –¥–æ–ª—è √ó {CHATTERFY_PERCENT}%
6. <b>–ò–¢–û–ì–û–í–ê–Ø –ü–†–ò–ë–´–õ–¨ = –ú–æ—è –¥–æ–ª—è - –ß–∞—Ç–µ—Ä—Ñ–∞–π</b>

üöÄ <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>—Ñ–∏–ª–∏–ø–ø–∏–Ω—ã 5 100</code> - —Ä–∞—Å—á–µ—Ç –¥–ª—è –§–∏–ª–∏–ø–ø–∏–Ω
‚Ä¢ <code>–∏–Ω–¥–∏—è 3 80 10</code> - —Ä–∞—Å—á–µ—Ç –¥–ª—è –ò–Ω–¥–∏–∏ —Å –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥–∞–º–∏
‚Ä¢ <code>be –∞–ª–∂–∏—Ä 150</code> - break-even –¥–ª—è –ê–ª–∂–∏—Ä–∞
‚Ä¢ <code>–º–∞—Ä–æ–∫–∫–æ 2 90</code> - —Ä–∞—Å—á–µ—Ç –¥–ª—è –ú–∞—Ä–æ–∫–∫–æ

üí± <b>–ö—É—Ä—Å:</b> 1 USD = {USD_TO_KZT} ‚Ç∏
    """
    await message.answer(info_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ <code>—Ñ–∏–ª–∏–ø–ø–∏–Ω—ã 5 100</code> - –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç\n"
        "‚Ä¢ <code>be –∏–Ω–¥–∏—è 150</code> - break-even\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode="HTML"
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ AI-Powered –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–ø—É—â–µ–Ω!")
    print("üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ì–ï–û:")
    for geo, rate in GEO_RATES.items():
        print(f"   ‚îú {geo}: ${rate}")
    print(f"üí± –ö—É—Ä—Å: 1 USD = {USD_TO_KZT} ‚Ç∏")
    print(f"üéØ –ú–æ—è –¥–æ–ª—è: {MY_SHARE_PERCENT}%")
    print(f"üîß –ß–∞—Ç–µ—Ä—Ñ–∞–π: {CHATTERFY_PERCENT}%")
    print("ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
    print("=" * 50)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
